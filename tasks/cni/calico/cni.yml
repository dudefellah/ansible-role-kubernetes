---
- include_tasks: "{{ role_path }}/tasks/generate-k8s-cert.yml"
  vars:
    key_path: "{{ kubernetes_cni_key }}"
    csr_path: "{{ kubernetes_cni_csr }}"
    cert_path: "{{ kubernetes_cni_crt }}"
    common_name: "{{ kubernetes_cni_plugin_name }}-cni"
    kubeconfig: "{{ kubernetes_kubeconfig }}"

- name: Slurp cni key
  slurp:
    src: "{{ kubernetes_cni_key }}"
  register: cni_key
  no_log: "{{ kubernetes_no_log }}"
  delegate_to: "{{ _kubernetes_master_node }}"
  when:
    - "not kubernetes_master"

- name: Slurp cni cert
  slurp:
    src: "{{ kubernetes_cni_crt }}"
  register: cni_crt
  delegate_to: "{{ _kubernetes_master_node }}"
  when:
    - "not kubernetes_master"

- name: Create cert/key destination paths
  file:
    path: "{{ key_path | dirname }}"
    state: directory
    owner: root
    group: root
    mode: "0755"
  loop:
    - "{{ kubernetes_cni_key }}"
    - "{{ kubernetes_cni_crt }}"
  loop_control:
    loop_var: key_path

- name: Write cni key to non-master nodes
  copy:
    content: "{{ cni_key.content | b64decode }}"
    dest: "{{ kubernetes_cni_key }}"
    owner: root
    group: root
    mode: "0600"
  no_log: "{{ kubernetes_no_log }}"
  when:
    - "not kubernetes_master"

- name: Write cni cert to non-master nodes
  copy:
    content: "{{ cni_crt.content | b64decode }}"
    dest: "{{ kubernetes_cni_crt }}"
    owner: root
    group: root
    mode: "0644"
  when:
    - "not kubernetes_master"

- name: Create cni etc dir
  file:
    path: "{{ kubernetes_cni_etc_path }}/net.d"
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: Create cni kubeconfig file
  template:
    src: kubeconfig.j2
    dest: "{{ kubernetes_cni_etc_path }}/net.d/{{ kubernetes_cni_plugin_name }}-kubeconfig"
    owner: root
    group: root
    mode: "0600"
  no_log: "{{ kubernetes_no_log }}"

- name: Apply RBAC Config
  k8s:
    state: present
    kubeconfig: "{{ kubernetes_kubeconfig }}"
    definition: "{{ kubernetes_cni_rbac }}"
  vars:
    ansible_python_interpreter: "{{ kubernetes_python_interpreter }}"
  when:
    - "kubernetes_master"

- name: Bind Cluster Role to cni user
  k8s:
    state: present
    kubeconfig: "{{ kubernetes_kubeconfig }}"
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: "{{ kubernetes_cni_plugin_name }}-cni"
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: "{{ kubernetes_cni_plugin_name }}-cni"
      subjects:
        - apiGroup: rbac.authorization.k8s.io
          kind: User
          name: "{{ kubernetes_cni_plugin_name }}-cni"
  vars:
    ansible_python_interpreter: "{{ kubernetes_python_interpreter }}"
  when:
    - "kubernetes_master"

- name: Create bindir for CNI binaries
  file:
    path: "{{ cni_bin.dest | dirname }}"
    state: directory
    owner: root
    group: root
    mode: "0755"
  loop: "{{ kubernetes_cni_plugin_binaries }}"
  loop_control:
    loop_var: cni_bin

- name: Look for existing Calico Plugin Binary
  stat:
    path: "{{ cni_bin.dest }}"
  loop: "{{ kubernetes_cni_plugin_binaries }}"
  loop_control:
    loop_var: cni_bin
  register: cni_plugin_st

- name: Download binaries
  get_url:
    url: "{{ cni_bin.url }}"
    dest: "{{ cni_bin.dest }}"
    owner: "{{ cni_bin.owner | default('root') }}"
    group: "{{ cni_bin.group | default('root') }}"
    mode: "{{ cni_bin.mode | default('0755') }}"
  loop: "{{ kubernetes_cni_plugin_binaries }}"
  loop_control:
    loop_var: cni_bin
    index_var: idx
  when:
    - "not cni_plugin_st.results[idx].stat.exists"

- name: Deploy pod network CNI config
  copy:
    content: "{{ kubernetes_cni_pod_network | to_json }}"
    dest: "{{ kubernetes_cni_etc_path }}/net.d/10-{{ kubernetes_cni_plugin_name }}.conflist"
    mode: "0644"
