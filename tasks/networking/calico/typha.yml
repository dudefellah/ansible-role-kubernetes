---
- name: Create typha certificates path
  file:
    path: "{{ crtfile | dirname }}"
    state: directory
    mode: "0755"
  loop:
    - "{{ kubernetes_network_calico_typha_ca_crt }}"
    - "{{ kubernetes_network_calico_typha_ca_csr }}"
    - "{{ kubernetes_network_calico_typha_ca_key }}"
  loop_control:
    loop_var: crtfile
  when:
    - "kubernetes_master"

- name: Look for existing typha CA key
  stat:
    path: "{{ kubernetes_network_calico_typha_ca_key }}"
  register: typha_ca_key_st

- name: Look for existing typha CA key
  stat:
    path: "{{ kubernetes_network_calico_typha_ca_crt }}"
  register: typha_ca_crt_st

- name: Use OpenSSL directly to create the typha CA key and crt
  command: >-
    openssl req -x509 -newkey rsa:4096 \
                  -keyout "{{ kubernetes_network_calico_typha_ca_key }}" \
                  -nodes \
                  -out "{{ kubernetes_network_calico_typha_ca_crt }}" \
                  -subj "/CN=Calico Typha CA" \
                  -days 365
  when:
    - "kubernetes_master"
    - "not typha_ca_key_st.stat.exists"
    - "not typha_ca_crt_st.stat.exists"

- name: Slurp up the CA crt
  slurp:
    src: "{{ kubernetes_network_calico_typha_ca_crt }}"
  register: typha_ca_crt
  when:
    - "kubernetes_master"

- name: Store the CA into a Kubernetes ConfigMap
  k8s:
    api_version: v1
    state: present
    kubeconfig: "{{ kubernetes_kubeconfig }}"
    definition:
      apiVersion: v1
      data:
        typhaca.crt: "{{ typha_ca_crt.content | b64decode }}"
      kind: ConfigMap
      metadata:
        name: calico-typha-ca
        namespace: kube-system
  vars:
    ansible_python_interpreter: "{{ kubernetes_python_interpreter }}"
  when:
    - "kubernetes_master"

- include_tasks: generate-manual-crt.yml
  vars:
    key_path: "{{ kubernetes_network_calico_typha_key }}"
    csr_path: "{{ kubernetes_network_calico_typha_csr }}"
    cert_path: "{{ kubernetes_network_calico_typha_crt }}"
    ca_cert_path: "{{ kubernetes_network_calico_typha_ca_crt }}"
    ca_key_path: "{{ kubernetes_network_calico_typha_ca_key }}"
    csr_subj: "/CN=calico-typha"
  when:
    - "kubernetes_master"

- name: Slurp up the typha key
  slurp:
    src: "{{ kubernetes_network_calico_typha_key }}"
  register: typha_key
  when:
    - "kubernetes_master"

- name: Slurp up the typha cert
  slurp:
    src: "{{ kubernetes_network_calico_typha_crt }}"
  register: typha_crt
  when:
    - "kubernetes_master"

- name: Create a secret for the key and cert
  k8s:
    api_version: v1
    state: present
    kubeconfig: "{{ kubernetes_kubeconfig }}"
    definition:
      apiVersion: v1
      data:
        typha.crt: "{{ typha_crt.content }}"
        typha.key: "{{ typha_key.content }}"
      kind: Secret
      metadata:
        name: calico-typha-certs
        namespace: kube-system
      type: Opaque
  no_log: "{{ kubernetes_no_log }}"
  vars:
    ansible_python_interpreter: "{{ kubernetes_python_interpreter }}"
  when:
    - "kubernetes_master"

- name: Create the Calico service account
  k8s:
    api_version: v1
    state: present
    kubeconfig: "{{ kubernetes_kubeconfig }}"
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: calico-typha
        namespace: kube-system
  vars:
    ansible_python_interpreter: "{{ kubernetes_python_interpreter }}"
  when:
    - "kubernetes_master"

- name: Create the Calico Typha ClusterRole
  k8s:
    api_version: v1
    state: present
    kubeconfig: "{{ kubernetes_kubeconfig }}"
    definition:
      kind: ClusterRole
      apiVersion: rbac.authorization.k8s.io/v1beta1
      metadata:
        name: calico-typha
      rules:
        - apiGroups: [""]
          resources:
            - pods
            - namespaces
            - serviceaccounts
            - endpoints
            - services
            - nodes
          verbs:
            # Used to discover service IPs for advertisement.
            - watch
            - list
        - apiGroups: ["networking.k8s.io"]
          resources:
            - networkpolicies
          verbs:
            - watch
            - list
        - apiGroups: ["crd.projectcalico.org"]
          resources:
            - globalfelixconfigs
            - felixconfigurations
            - bgppeers
            - globalbgpconfigs
            - bgpconfigurations
            - ippools
            - ipamblocks
            - globalnetworkpolicies
            - globalnetworksets
            - networkpolicies
            - clusterinformations
            - hostendpoints
            - blockaffinities
            - networksets
          verbs:
            - get
            - list
            - watch
        - apiGroups: ["crd.projectcalico.org"]
          resources:
            #- ippools
            #- felixconfigurations
            - clusterinformations
          verbs:
            - get
            - create
            - update
  vars:
    ansible_python_interpreter: "{{ kubernetes_python_interpreter }}"
  when:
    - "kubernetes_master"

- name: Create the Calico Typha ClusterRoleBinding
  k8s:
    api_version: v1
    state: present
    kubeconfig: "{{ kubernetes_kubeconfig }}"
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: calico-typha
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: calico-typha
      subjects:
      - kind: ServiceAccount
        name: calico-typha
        namespace: kube-system
  vars:
    ansible_python_interpreter: "{{ kubernetes_python_interpreter }}"
  when:
    - "kubernetes_master"

- name: Deploy typha pods
  k8s:
    api_version: v1
    state: present
    kubeconfig: "{{ kubernetes_kubeconfig }}"
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: calico-typha
        namespace: kube-system
        labels:
          k8s-app: calico-typha
      spec:
        replicas: 3
        revisionHistoryLimit: 2
        selector:
          matchLabels:
            k8s-app: calico-typha
        template:
          metadata:
            labels:
              k8s-app: calico-typha
            annotations:
              cluster-autoscaler.kubernetes.io/safe-to-evict: 'true'
          spec:
            hostNetwork: true
            tolerations:
              # Mark the pod as a critical add-on for rescheduling.
              - key: CriticalAddonsOnly
                operator: Exists
            serviceAccountName: calico-typha
            priorityClassName: system-cluster-critical
            containers:
            - image: calico/typha:v3.8.0
              name: calico-typha
              ports:
              - containerPort: 5473
                name: calico-typha
                protocol: TCP
              env:
                # Disable logging to file and syslog since those don't make sense in Kubernetes.
                - name: TYPHA_LOGFILEPATH
                  value: "none"
                - name: TYPHA_LOGSEVERITYSYS
                  value: "none"
                # Monitor the Kubernetes API to find the number of running instances and rebalance
                # connections.
                - name: TYPHA_CONNECTIONREBALANCINGMODE
                  value: "kubernetes"
                - name: TYPHA_DATASTORETYPE
                  value: "kubernetes"
                - name: TYPHA_HEALTHENABLED
                  value: "true"
                # Location of the CA bundle Typha uses to authenticate calico/node; volume mount
                - name: TYPHA_CAFILE
                  value: /calico-typha-ca/typhaca.crt
                # Common name on the calico/node certificate
                - name: TYPHA_CLIENTCN
                  value: calico-node
                # Location of the server certificate for Typha; volume mount
                - name: TYPHA_SERVERCERTFILE
                  value: /calico-typha-certs/typha.crt
                # Location of the server certificate key for Typha; volume mount
                - name: TYPHA_SERVERKEYFILE
                  value: /calico-typha-certs/typha.key
              livenessProbe:
                httpGet:
                  path: /liveness
                  port: 9098
                  host: localhost
                periodSeconds: 30
                initialDelaySeconds: 30
              readinessProbe:
                httpGet:
                  path: /readiness
                  port: 9098
                  host: localhost
                periodSeconds: 10
              volumeMounts:
              - name: calico-typha-ca
                mountPath: "/calico-typha-ca"
                readOnly: true
              - name: calico-typha-certs
                mountPath: "/calico-typha-certs"
                readOnly: true
            volumes:
            - name: calico-typha-ca
              configMap:
                name: calico-typha-ca
            - name: calico-typha-certs
              secret:
                secretName: calico-typha-certs
  vars:
    ansible_python_interpreter: "{{ kubernetes_python_interpreter }}"
  when:
    - "kubernetes_master"

- name: Deploy typha service
  k8s:
    api_version: v1
    state: present
    kubeconfig: "{{ kubernetes_kubeconfig }}"
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: calico-typha
        namespace: kube-system
        labels:
          k8s-app: calico-typha
      spec:
        ports:
          - port: 5473
            protocol: TCP
            targetPort: calico-typha
            name: calico-typha
        selector:
          k8s-app: calico-typha
  vars:
    ansible_python_interpreter: "{{ kubernetes_python_interpreter }}"
  when:
    - "kubernetes_master"
