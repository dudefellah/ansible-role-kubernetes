---
- include_tasks: "{{ role_path }}/tasks/generate-manual-crt.yml"
  vars:
    key_path: "{{ kubernetes_network_calico_node_key }}"
    csr_path: "{{ kubernetes_network_calico_node_csr }}"
    cert_path: "{{ kubernetes_network_calico_node_crt }}"
    ca_cert_path: "{{ kubernetes_network_calico_typha_ca_crt }}"
    ca_key_path: "{{ kubernetes_network_calico_typha_ca_key }}"
    csr_subj: "/CN=calico-node"
    kubeconfig: "{{ kubernetes_kubeconfig }}"

- name: Slurp up the node key
  slurp:
    src: "{{ kubernetes_network_calico_node_key }}"
  no_log: "{{ kubernetes_no_log }}"
  register: node_key
  when:
    - "kubernetes_master"

- name: Slurp up the node crt
  slurp:
    src: "{{ kubernetes_network_calico_node_crt }}"
  register: node_crt
  when:
    - "kubernetes_master"

- name: Deposit the certificate and key into a secret
  k8s:
    api_version: v1
    state: present
    kubeconfig: "{{ kubernetes_kubeconfig }}"
    definition:
      apiVersion: v1
      data:
        calico-node.crt: "{{ node_crt.content }}"
        calico-node.key: "{{ node_key.content }}"
      kind: Secret
      metadata:
        name: calico-node-certs
        namespace: kube-system
      type: Opaque
  no_log: "{{ kubernetes_no_log }}"
  vars:
    ansible_python_interpreter: "{{ kubernetes_python_interpreter }}"
  when:
    - "kubernetes_master"

- name: Create the Calico node service account
  k8s:
    api_version: v1
    state: present
    kubeconfig: "{{ kubernetes_kubeconfig }}"
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: calico-node
        namespace: kube-system
  vars:
    ansible_python_interpreter: "{{ kubernetes_python_interpreter }}"
  when:
    - "kubernetes_master"

- name: Create the Calico ClusterRole
  k8s:
    api_version: v1
    state: present
    kubeconfig: "{{ kubernetes_kubeconfig }}"
    definition:
      kind: ClusterRole
      apiVersion: rbac.authorization.k8s.io/v1
      metadata:
        name: calico-node
      rules:
        - apiGroups: [""]
          resources:
            - endpoints
            - services
          verbs:
            # Used to discover service IPs for advertisement.
            - watch
            - list
            # Used to discover Typhas.
            - get
        # Pod CIDR auto-detection on kubeadm needs access to config maps.
        - apiGroups: [""]
          resources:
            - configmaps
          verbs:
            - get
        - apiGroups: [""]
          resources:
            - nodes/status
          verbs:
            # Needed for clearing NodeNetworkUnavailable flag.
            - patch
            # Calico stores some configuration information in node annotations.
            - update
        - apiGroups: ["crd.projectcalico.org"]
          resources:
            - globalfelixconfigs
            - felixconfigurations
            - bgppeers
            - globalbgpconfigs
            - bgpconfigurations
            - ippools
            - ipamblocks
            - globalnetworkpolicies
            - globalnetworksets
            - networkpolicies
            - clusterinformations
            - hostendpoints
            - blockaffinities
            - networksets
          verbs:
            - get
            - list
            - watch
        # Calico must create and update some CRDs on startup.
        - apiGroups: ["crd.projectcalico.org"]
          resources:
            - ippools
            - felixconfigurations
            - clusterinformations
          verbs:
            - create
            - update
        # Calico stores some configuration information on the node.
        - apiGroups: [""]
          resources:
            - nodes
          verbs:
            - get
            - list
            - watch
        - apiGroups: ["crd.projectcalico.org"]
          resources:
            - ipamconfigs
          verbs:
            - get
        # Block affinities must also be watchable by confd for route aggregation.
        - apiGroups: ["crd.projectcalico.org"]
          resources:
            - blockaffinities
          verbs:
            - watch
  vars:
    ansible_python_interpreter: "{{ kubernetes_python_interpreter }}"
  when:
    - "kubernetes_master"

- name: Create the Calico ClusterRoleBinding
  k8s:
    api_version: v1
    state: present
    kubeconfig: "{{ kubernetes_kubeconfig }}"
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        creationTimestamp: "2020-09-18T05:22:29Z"
        name: calico-node
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: calico-node
      subjects:
        - kind: ServiceAccount
          name: calico-node
          namespace: kube-system
  vars:
    ansible_python_interpreter: "{{ kubernetes_python_interpreter }}"
  when:
    - "kubernetes_master"

- name: Deploy daemon set
  k8s:
    api_version: v1
    state: present
    kubeconfig: "{{ kubernetes_kubeconfig }}"
    definition:
      kind: DaemonSet
      apiVersion: apps/v1
      metadata:
        name: calico-node
        namespace: kube-system
        labels:
          k8s-app: calico-node
      spec:
        selector:
          matchLabels:
            k8s-app: calico-node
        updateStrategy:
          type: RollingUpdate
          rollingUpdate:
            maxUnavailable: 1
        template:
          metadata:
            labels:
              k8s-app: calico-node
          spec:
            nodeSelector:
              kubernetes.io/os: linux
            hostNetwork: true
            tolerations:
              # Make sure calico-node gets scheduled on all nodes.
              - effect: NoSchedule
                operator: Exists
              # Mark the pod as a critical add-on for rescheduling.
              - key: CriticalAddonsOnly
                operator: Exists
              - effect: NoExecute
                operator: Exists
            serviceAccountName: calico-node
            # Minimize downtime during a rolling upgrade or deletion; tell Kubernetes to do a "force
            # deletion": https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods.
            terminationGracePeriodSeconds: 0
            priorityClassName: system-node-critical
            containers:
              # Runs calico-node container on each Kubernetes node.  This
              # container programs network policy and routes on each
              # host.
              - name: calico-node
                image: calico/node:v3.8.0
                env:
                  # Use Kubernetes API as the backing datastore.
                  - name: DATASTORE_TYPE
                    value: "kubernetes"
                  - name: FELIX_TYPHAK8SSERVICENAME
                    value: calico-typha
                  # Wait for the datastore.
                  - name: WAIT_FOR_DATASTORE
                    value: "true"
                  # Set based on the k8s node name.
                  - name: NODENAME
                    valueFrom:
                      fieldRef:
                        fieldPath: spec.nodeName
                  # Choose the backend to use.
                  - name: CALICO_NETWORKING_BACKEND
                    value: bird
                  # Cluster type to identify the deployment type
                  - name: CLUSTER_TYPE
                    value: "k8s,bgp"
                  # Auto-detect the BGP IP address.
                  - name: IP
                    value: "autodetect"
                  # Disable file logging so kubectl logs works.
                  - name: CALICO_DISABLE_FILE_LOGGING
                    value: "true"
                  # Set Felix endpoint to host default action to ACCEPT.
                  - name: FELIX_DEFAULTENDPOINTTOHOSTACTION
                    value: "ACCEPT"
                  # Disable IPv6 on Kubernetes.
                  - name: FELIX_IPV6SUPPORT
                    value: "false"
                  - name: FELIX_IPV6SUPPORTENABLED
                    value: "false"
                  # Set Felix logging to "info"
                  - name: FELIX_LOGSEVERITYSCREEN
                    value: "info"
                  - name: FELIX_HEALTHENABLED
                    value: "true"
                  # Location of the CA bundle Felix uses to authenticate Typha; volume mount
                  - name: FELIX_TYPHACAFILE
                    value: /calico-typha-ca/typhaca.crt
                  # Common name on the Typha certificate; used to verify we are talking to an authentic typha
                  - name: FELIX_TYPHACN
                    value: calico-typha
                  # Location of the client certificate for connecting to Typha; volume mount
                  - name: FELIX_TYPHACERTFILE
                    value: /calico-node-certs/calico-node.crt
                  # Location of the client certificate key for connecting to Typha; volume mount
                  - name: FELIX_TYPHAKEYFILE
                    value: /calico-node-certs/calico-node.key
                securityContext:
                  privileged: true
                resources:
                  requests:
                    cpu: 250m
                livenessProbe:
                  httpGet:
                    path: /liveness
                    port: 9099
                    host: localhost
                  periodSeconds: 10
                  initialDelaySeconds: 10
                  failureThreshold: 6
                readinessProbe:
                  exec:
                    command:
                    - /bin/calico-node
                    - -bird-ready
                    - -felix-ready
                  periodSeconds: 10
                volumeMounts:
                  - mountPath: /lib/modules
                    name: lib-modules
                    readOnly: true
                  - mountPath: /run/xtables.lock
                    name: xtables-lock
                    readOnly: false
                  - mountPath: /var/run/calico
                    name: var-run-calico
                    readOnly: false
                  - mountPath: /var/lib/calico
                    name: var-lib-calico
                    readOnly: false
                  - mountPath: /var/run/nodeagent
                    name: policysync
                  - mountPath: "/calico-typha-ca"
                    name: calico-typha-ca
                    readOnly: true
                  - mountPath: /calico-node-certs
                    name: calico-node-certs
                    readOnly: true
            volumes:
              # Used by calico-node.
              - name: lib-modules
                hostPath:
                  path: /lib/modules
              - name: var-run-calico
                hostPath:
                  path: /var/run/calico
              - name: var-lib-calico
                hostPath:
                  path: /var/lib/calico
              - name: xtables-lock
                hostPath:
                  path: /run/xtables.lock
                  type: FileOrCreate
              # Used to create per-pod Unix Domain Sockets
              - name: policysync
                hostPath:
                  type: DirectoryOrCreate
                  path: /var/run/nodeagent
              - name: calico-typha-ca
                configMap:
                  name: calico-typha-ca
              - name: calico-node-certs
                secret:
                  secretName: calico-node-certs
  vars:
    ansible_python_interpreter: "{{ kubernetes_python_interpreter }}"
  when:
    - "kubernetes_master"
